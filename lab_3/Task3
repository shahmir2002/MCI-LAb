
//Specifying the addresses of the registers below
#define SYSCTL_RCGCGPIO_R (*((volatile int *) 0x400FE608))
#define GPIO_PORTB_DEN_R (*((volatile int *) 0x4000551C))
#define GPIO_PORTB_DIR_R (*((volatile int *) 0x40005400))
#define GPIO_PORTB_DATA_R (*((volatile int *) 0x400053FC))
#define GPIO_PORTB_AMSEL_R (*((volatile int *) 0x40005528))
#define GPIO_PORTB_AFSEL_R (*((volatile int *) 0x40005420))
#define GPIO_PORTB_PCTL_R (*((volatile int *) 0x4000552C))
#define GPIO_PORTB_PUR_R (*((volatile int *) 0x40005510))
#define GPIO_PORTB_LOCK_R (*((volatile int *) 0x40005520))
#define GPIO_PORTB_CR_R (*((volatile int *) 0x40005524))
#define GPIO_PORTF_DATA_RD (*((volatile int *) 0x40025044))
#define GPIO_PORTF_DIR_R (*((volatile int *) 0x40025400))
#define GPIO_PORTF_DEN_R (*((volatile int *) 0x4002551C))
#define GPIO_PORTF_PUR_R (*((volatile int *) 0x40025510))
#define GPIO_PORTF_LOCK_R (*((volatile int *) 0x40025520))
#define GPIO_PORTF_CR_R (*((volatile int *) 0x40025524))
#define GPIO_PORT_CLK_EN 0x22 /* enable clock for PORTB and PORTF*/
void Delay(unsigned int);
void PORTB_Init(void); //PORTB Initialization function
void PORTF_Init(void); //PORTF Initialization function
int main(void)
{
//Declare your list here and initialize PortB and PortF here
unsigned char digitPattern[] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82,
0xF8, 0x80, 0x90,0x88, 0x83, 0xC6,0xA1,0x86,0x8E }; //List of Hex Code for Digits
int i = 0;
PORTB_Init(); //PORTB Initialization function
PORTF_Init(); //PORTF Initialization function
GPIO_PORTB_DATA_R = digitPattern[0];
    
while(1)
{
//Use the following command to read SW1 State (0 means pressed)
// (GPIO_PORTF_DATA_RD & 0x10) == 0
//Use the following command to read SW2 State (0 means pressed)
// (GPIO_PORTF_DATA_RD & 0x01) == 0
// Write your code below to read state of SW1/SW2 and write on 7-Segment
 if((GPIO_PORTF_DATA_RD & 0x10) == 0){
     if (i<15){
         i++;
     GPIO_PORTB_DATA_R = digitPattern[i];
     Delay(250);
     }
 }
 if((GPIO_PORTF_DATA_RD & 0x01) == 0){
     if (i>0){
         i--;
     GPIO_PORTB_DATA_R = digitPattern[i];
     Delay(250);
     }
    
 }
  
    
}
}
void Delay(unsigned int delay){
volatile unsigned int i, counter;
counter = delay * 4000; // 1 second (1000 msec) needs 40000000 counter so
//4000000/1000 = 4000
for(i=0;i<counter;i++);
}
void PORTB_Init(void)
{
SYSCTL_RCGCGPIO_R |= GPIO_PORT_CLK_EN; // activate clock for Port
//B and F
Delay(10);
// Delay 10 msec to allow clock to start on PORTs
GPIO_PORTB_DEN_R = 0xFF; //
//Enable all pins of PORTB
GPIO_PORTB_DIR_R = 0xFF; //
//Make all pins of PORTB as ouptut pin
GPIO_PORTB_PCTL_R &= ~(0xFF) ;
// Regular GPIO of PORTB
GPIO_PORTB_AMSEL_R &= ~(0xFF); // Disable
//analog function on all pins of PORTB
GPIO_PORTB_AFSEL_R &= ~(0xFF); //
//Regular port function
//Configure PORTF Pins as input pins
}
void PORTF_Init(void)
{
GPIO_PORTF_LOCK_R = 0x4C4F434B; //
//unlockGPIOFCR register
GPIO_PORTF_CR_R = 0x11;
// enable commits for F0 and F4
GPIO_PORTF_PUR_R |= 0x11;
// Pull up resistor for F0 and F4
GPIO_PORTF_LOCK_R = 0x00;
// lockGPIOFCR register
GPIO_PORTF_DEN_R = 0xFF;
// Enable PORTF
GPIO_PORTF_DIR_R = 0x00;
}
